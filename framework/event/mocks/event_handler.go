// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handler.go

// Package event_handler_mocks is a generated GoMock package.
package event_handler_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	event "github.com/kittipat1413/go-common/framework/event"
)

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder[T]
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder[T any] struct {
	mock *MockEventHandler[T]
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler[T any](ctrl *gomock.Controller) *MockEventHandler[T] {
	mock := &MockEventHandler[T]{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler[T]) EXPECT() *MockEventHandlerMockRecorder[T] {
	return m.recorder
}

// AfterHandle mocks base method.
func (m *MockEventHandler[T]) AfterHandle(ctx context.Context, msg event.EventMessage[T], eventResult error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterHandle", ctx, msg, eventResult)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterHandle indicates an expected call of AfterHandle.
func (mr *MockEventHandlerMockRecorder[T]) AfterHandle(ctx, msg, eventResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterHandle", reflect.TypeOf((*MockEventHandler[T])(nil).AfterHandle), ctx, msg, eventResult)
}

// BeforeHandle mocks base method.
func (m *MockEventHandler[T]) BeforeHandle(ctx context.Context, msg event.EventMessage[T]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeHandle", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeHandle indicates an expected call of BeforeHandle.
func (mr *MockEventHandlerMockRecorder[T]) BeforeHandle(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeHandle", reflect.TypeOf((*MockEventHandler[T])(nil).BeforeHandle), ctx, msg)
}

// UnmarshalEventMessage mocks base method.
func (m *MockEventHandler[T]) UnmarshalEventMessage(data []byte) (event.EventMessage[T], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalEventMessage", data)
	ret0, _ := ret[0].(event.EventMessage[T])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalEventMessage indicates an expected call of UnmarshalEventMessage.
func (mr *MockEventHandlerMockRecorder[T]) UnmarshalEventMessage(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalEventMessage", reflect.TypeOf((*MockEventHandler[T])(nil).UnmarshalEventMessage), data)
}
