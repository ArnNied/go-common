// Code generated by MockGen. DO NOT EDIT.
// Source: ./cache.go

// Package cache_mocks is a generated GoMock package.
package cache_mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	cache "github.com/kittipat1413/go-common/framework/cache"
)

// MockCache is a mock of Cache interface.
type MockCache[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder[T]
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder[T any] struct {
	mock *MockCache[T]
}

// NewMockCache creates a new mock instance.
func NewMockCache[T any](ctrl *gomock.Controller) *MockCache[T] {
	mock := &MockCache[T]{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache[T]) EXPECT() *MockCacheMockRecorder[T] {
	return m.recorder
}

// Get mocks base method.
func (m *MockCache[T]) Get(ctx context.Context, key string, initializer cache.Initializer[T]) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, initializer)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder[T]) Get(ctx, key, initializer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache[T])(nil).Get), ctx, key, initializer)
}

// Invalidate mocks base method.
func (m *MockCache[T]) Invalidate(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invalidate", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockCacheMockRecorder[T]) Invalidate(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockCache[T])(nil).Invalidate), ctx, key)
}

// InvalidateAll mocks base method.
func (m *MockCache[T]) InvalidateAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateAll indicates an expected call of InvalidateAll.
func (mr *MockCacheMockRecorder[T]) InvalidateAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateAll", reflect.TypeOf((*MockCache[T])(nil).InvalidateAll), ctx)
}

// Set mocks base method.
func (m *MockCache[T]) Set(ctx context.Context, key string, value T, duration *time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", ctx, key, value, duration)
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder[T]) Set(ctx, key, value, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache[T])(nil).Set), ctx, key, value, duration)
}
